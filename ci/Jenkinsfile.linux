#!/usr/bin/env groovy
library 'status-jenkins-lib@linux-use-nix'

/* Options section can't access functions in objects. */
def isPRBuild = utils.isPRBuild()

pipeline {
  agent { label 'linux' }

  parameters {
    booleanParam(
      name: 'RELEASE',
      description: 'Decides whether binaries are built with debug symbols.',
      defaultValue: params.RELEASE ?: false
    )
    choice(
      name: 'VERBOSE',
      description: 'Level of verbosity based on nimbus-build-system setup.',
      choices: ['0', '1', '2']
    )
    string(
      name: 'NIMFLAGS',
      description: 'Extra Nim flags. Examples: --verbosity:2 --passL:"-v" --passC:"-v"',
      defaultValue: '--colors:off'
    )
    booleanParam(
      name: 'USE_MOCKED_KEYCARD_LIB',
      description: 'Decides whether the mocked status-keycard-go library is built.',
      defaultValue: false
    )
  }

  options {
    timestamps()
    /* Prevent Jenkins jobs from running forever */
    timeout(time: 25, unit: 'MINUTES')
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '30',
      artifactNumToKeepStr: '3',
    ))
    /* Allows combined build to copy */
    copyArtifactPermission('/status-desktop/*')
    /* Abort old PR builds. */
    disableConcurrentBuilds(
      abortPrevious: isPRBuild
    )
  }

  environment {
    TARGET = "linux/${getArch()}"
    /* Improve make performance */
    MAKEFLAGS = "-j1 V=${params.VERBOSE}"
    /* Avoid weird bugs caused by stale cache. */
    QML_DISABLE_DISK_CACHE = "true"
    /* Control output the filename */
    STATUS_CLIENT_APPIMAGE = "pkg/${utils.pkgFilename(ext: 'AppImage', arch: getArch())}"
    STATUS_CLIENT_TARBALL = "pkg/${utils.pkgFilename(ext: 'tar.gz', arch: getArch())}"
  }

  stages {
    stage('Deps') {
      steps { script {
        nix.shell('make update', pure: false)
        nix.shell('make deps', pure: false)
      } }
    }

    stage('status-go') {
      steps { script {
        nix.shell('make status-go', pure: false)
      } }
    }

    stage('Package') {
      steps { script {
        linux.bundle('tgz-linux', 1)
      } }
    }

    stage('Parallel Upload') {
      parallel {
        stage('Upload') {
          steps { script {
            env.PKG_URL = s3.uploadArtifact(env.STATUS_CLIENT_TARBALL)
            jenkins.setBuildDesc(AppImage: env.PKG_URL)
          } }
        }
        stage('Archive') {
          steps { script {
            archiveArtifacts("${env.STATUS_CLIENT_TARBALL}*")
          } }
        }
      }
    }

    stage('E2E') {
      when { expression { utils.isPRBuild() } }
      steps { script {
        build(
          job: 'status-desktop/e2e/prs',
          parameters: jenkins.mapToParams([BUILD_SOURCE: JOB_NAME]),
          wait: false
        )
      } }
    }
  }
  post {
    success { script { github.notifyPR(true) } }
    failure { script { github.notifyPR(false) } }
    cleanup { sh './scripts/clean-git.sh' }
  }
}

def getArch() {
  def tokens = Thread.currentThread().getName().split('/')
  for (def arch in ['x86_64', 'aarch64']) {
    if (tokens.contains(arch)) { return arch }
  }
}
